<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- This module was also published with a richer model, Gradle metadata,  -->
  <!-- which should be used instead. Do not delete the following line which  -->
  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->
  <!-- that they should prefer consuming it instead. -->
  <!-- do_not_remove: published-with-gradle-metadata -->
  <modelVersion>4.0.0</modelVersion> 
  <parent>
    <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
    <artifactId>jackson-jakarta-rs-providers</artifactId>
    <version>2.14.2</version>
  </parent>
  <artifactId>jackson-jakarta-rs-xml-provider</artifactId>
  <name>Jackson Jakarta-RS: XML</name>
  <packaging>bundle</packaging>
  <description>Functionality to handle XML input/output for Jakarta-RS implementations
(like Jersey and RESTeasy) using standard Jackson data binding.
  </description>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <properties>
    <!-- Generate PackageVersion.java into this directory. -->
    <packageVersion.dir>com/fasterxml/jackson/jakarta/rs/xml</packageVersion.dir>
    <packageVersion.package>${project.groupId}.xml</packageVersion.package>
    <osgi.export>${project.groupId}.xml.*;version=${project.version}</osgi.export>
    <!-- NOTE: Jakarta XmlBind annotations module IS optional for xml format as of 2.13 -->
    <osgi.import>jakarta.ws.rs;version="${jakarta.ws.rs.version}"
,jakarta.ws.rs.core;version="${jakarta.ws.rs.version}"
,jakarta.ws.rs.ext;version="${jakarta.ws.rs.version}"
,com.fasterxml.jackson.module.jakarta.xmlbind;resolution:=optional
,*
</osgi.import>
  </properties>

  <dependencies>
    <!-- builds on shared base Jakarta-RS handling code... -->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jackson-jakarta-rs-base</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Extends Jackson core, mapper, and also (sort of optionally) on XmlBind annotation handler -->
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
    </dependency>
    <!-- may also need JAXB annotation support -->
    <dependency> 
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>
    </dependency>
    <!--  But Stax2 API must be included -->
    <dependency>
      <groupId>org.codehaus.woodstox</groupId>
      <artifactId>stax2-api</artifactId>
      <!-- Ideally we'd accept range of versions but won't really work with Maven... -->

<!--      <version>[4.0, 5.0)</version>  -->
      <version>4.2.1</version>
    </dependency>

    <!-- Also: While JDK-included SJSXP almost works, there are some rough edges;
         so let's add full non-test dep to modern Woodstox version.
      -->
    <dependency>
      <groupId>com.fasterxml.woodstox</groupId>
      <artifactId>woodstox-core</artifactId>
      <version>6.5.0</version>
      <exclusions>
        <exclusion>
          <groupId>javax.xml.stream</groupId>
          <artifactId>stax-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

  </dependencies>
  <build>
    <plugins>
      <plugin>
        <!-- Inherited from oss-base. Generate PackageVersion.java.-->
	<groupId>com.google.code.maven-replacer-plugin</groupId>
        <artifactId>replacer</artifactId>
	<executions>
          <execution>
            <id>process-packageVersion</id>
            <phase>process-sources</phase>
          </execution>
	</executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>no-meta-inf-services</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <classifier>no-metainf-services</classifier>
              <excludes>
                <exclude>META-INF/services/**</exclude>
              </excludes>
              <archive>
                <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.moditect</groupId>
        <artifactId>moditect-maven-plugin</artifactId>
      </plugin>

    </plugins>
  </build>
</project>
